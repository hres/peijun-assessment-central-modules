<?php
// $Id: search_reindexing.module,v 1.0.0 2010/07/27 15:26:16 peijun zhang $
//ini_set('memory_limit','6000M');

define('REINDEX_START_TEXT', 'Start');

function search_reindexing_permission() {
    return array(
    'access reindexing' => array(
      'title' => t('Access reindexing tool'), 
      'description' => t('Perform reindexing search indexes.'),
      ),
    );
} // function nhpid_perm()


function search_reindexing_menu() {

  $items = array();
  $root = 'admin/config/development/search_reindexing';
  $items[$root] = array(
    'title' => t('Search reindexing'),
    'description' => 'Reindex search indexes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_reindexing_form'),
    'access arguments' => array('access reindexing'),
    'type' => MENU_NORMAL_ITEM,
   );
   $items[$root . "/start"] = array(
    'title' => t(REINDEX_START_TEXT),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reindex_start_confirm'),
    'access arguments' => array('access reindexing'),
    'type' => MENU_CALLBACK
  );
   

  return $items;
}
function search_reindexing_form($form, &$form_state) {
  
  $sql = "SELECT count(n.nid) remains FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE d.sid IS NULL OR d.reindex <> 0";
  $remains = db_query(db_query($sql))->fetchObject() -> remains;
  $form['reindex'] = array(
    '#type' => 'fieldset',
    '#title' => t('ReIndex the Search Index'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t("The search index normally is indexed using cron, which is the best use of resources.  However, this can rebuild the index quickly.  This should only be used on development servers, off-hours, or in an emergency"),
  );
  $form['reindex']['remains'] = array(
    '#type' => 'item',
    '#title' => "",
    '#description' => t("There are $remains items remaining to be indexed."),
  );
  $form['reindex']['rebuild'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rebuild'),
    '#description' => t('If checked the entire index will be rebuild, If not checked it will only index everything that needs to be indexed.'),
    '#default_value' => 0,
  );
  $form['reindex']['start'] = array(
    '#type' => 'submit',
    '#value' => t(REINDEX_START_TEXT),
  );
  $form['#submit'][] = 'search_reindexing_form_submit';
  return $form;
}

/**
 * settings form handler
 */
function search_reindexing_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t(REINDEX_START_TEXT)) {
    drupal_goto('admin/config/development/search_reindexing/start/'. $form_state['values']['rebuild']);
  }
}

/**
 * Menu callback: confirm starting the teaser re-building.
 */
function reindex_start_confirm() {
  $form = array('rebuild' => array('#type' => 'value', '#value' => arg(4)));
  $name = 'Index remaining nodes ';
  if (arg(4)) $name = 'Re-index';
  return confirm_form($form, t('Are you sure you want to re-index the search index?'), 'search_reindexing', t('This will take a while and will have a performance impact on your server.'), t($name), t('Cancel'));
}

/**
 * Handler for start confirmation
 */
function reindex_start_confirm_submit(&$form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $operations = array();
    if ($form_state['values']['rebuild']) {
      $sql = 'SELECT nid FROM {node} WHERE status = 1 ORDER BY nid ASC';
    }
    else {
      $sql = "SELECT n.nid FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, n.nid ASC";
    }
    $results = db_query($sql); 
    //drupal_set_message(nhpid_api_dump($results, 'blue', TRUE));
    if ($results -> rowCount() < 1){
      drupal_set_message("No nodes need to be indexed.");
    }
    else {
      foreach ($results as $node) {
        
        $operations[] = array('reindex_dosearch', array($node->nid));
      }
      $operations[] = array('reindex_done', array());
  
      // start the batch
      $batch = array(
        'title' => t('Regenerating Search Index'),
        'operations' => $operations,
        'finished' => 'reindex_finished',
      );
      batch_set($batch);
  
      
      }
    // when done redirect to the settings page
    $form_state['redirect'] = 'admin/config/development/search_reindexing';
  }
}

function reindex_dosearch($nid, &$context) {
  if (!isset($context['results'])) {
    $context['results'] = array('attempted' => 0, 'success' => 0);
  }
  $context['results']['attempted'] ++;
  //drupal_set_message(nhpid_api_dump($nid, 'blue', TRUE));
  $node = node_load($nid);
  nhpid_api_index_node ($node, $update = false);
  $context['results']['success'] ++;
}

function reindex_done(&$context) {
  // Update word IDF (Inverse Document Frequency) counts for all words
  db_query("DELETE FROM {search_total}");
  db_query("INSERT INTO {search_total} (word, count) SELECT word, LOG10(1+1/GREATEST(1, SUM(score))) FROM {search_index} GROUP BY word");
}

function reindex_finished($success, $results, $operations) {
  //drupal_set_message(nhpid_api_dump($results, 'purple', TRUE));
  if ($success) {
    if ($results['success'] == $results['attempted']) {
      $message = t('Finished reindexing @success nodes successfully.', array('@success' => $results['success']));
    }
    else {
      $message = t('Finished reindexing @success of @attempted successfully.', array('@success' => $results['success'], '@attempt' => $results['attempted']));
    }
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}


